/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode SortList(ListNode head) 
    {
        if(head == null || head.next == null)
        {
            return head;
        }
        
        var dummy = new ListNode(-1);
        dummy.next = head;
        
        //Detect middle of linked list
        var left = head;
        ListNode right = getMid(dummy);
        var temp = right.next;
        right.next = null;
        right = temp;
        
        //Call recursive function on two lists
        left = SortList(left);
        right = SortList(right);
        
        //Merge the two lists
        var mergedList = Merge(left, right);
        
        return mergedList;
    }
    
    public ListNode getMid(ListNode current)
    {
        var slow = current;
        var fast = current;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public ListNode Merge(ListNode l1, ListNode l2) 
    {
        ListNode dummy = new ListNode(-1);
        var head = dummy;
        while (l1 != null && l2 != null)
        {
            if (l1.val < l2.val)
            {
                head.next = l1;
                l1 = l1.next;
            }
            else
            {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }

        if (l1 != null)
        {
            head.next = l1;
        }

        if (l2 != null)
        {
            head.next = l2;
        }

        return dummy.next;
    }
}