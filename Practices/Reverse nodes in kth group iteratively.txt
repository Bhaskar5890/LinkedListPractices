/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode ReverseKGroup(ListNode head, int k) 
    {
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode groupPrev = dummy;
        ListNode groupNext = null;
        while(true)
        {
            var kthNode = GetKthNode(groupPrev, k);
            if(kthNode == null)
            {
                break;
            }
            
            //Storing the variables
            groupNext = kthNode.next;
            var prev = groupNext;
            var current = groupPrev.next;
            
            //Reverse the nodes from head to k
            while(current != groupNext)
            {
                var temp = current.next;
                current.next = prev;
                prev = current;
                current = temp;
            }
            
            //Update the pointers
            var temp2 = groupPrev.next;
            groupPrev.next = kthNode;
            groupPrev = temp2;
        }
        
        return dummy.next;
    }
    
    public ListNode GetKthNode(ListNode current, int k)
    {
        while(current != null && k > 0)
        {
            current = current.next;
            k--;
        }
        return current;
    }
}