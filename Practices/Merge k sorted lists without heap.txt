/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeKLists(ListNode[] lists) 
    {
        if(lists.Length == 0)
        {
            return null;
        }
        
        while(lists.Length > 1)
        {
            List<ListNode> outputlist = new List<ListNode>();
            for(int i = 0; i < lists.Length; i+=2)
            {
                var l1 = lists[i];
                var l2 = (i+1) < lists.Length ? lists[i+1] : null;
                
                var mergedList = MergeTwoLists(l1, l2);
                outputlist.Add(mergedList);
            }
            lists = outputlist.ToArray();
        }
        
        return lists[0];
    }
    
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) 
    {
        ListNode dummy = new ListNode(-1);
        var head = dummy;
        while (l1 != null && l2 != null)
        {
            if (l1.val < l2.val)
            {
                head.next = l1;
                l1 = l1.next;
            }
            else
            {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }

        if (l1 != null)
        {
            head.next = l1;
        }

        if (l2 != null)
        {
            head.next = l2;
        }

        return dummy.next;
    }
}